{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\nvar MySwal = withReactContent(Swal);\nimport baseUrl from '../../utils/baseUrl';\n\nvar alertContent = function alertContent() {\n  MySwal.fire({\n    title: 'Congratulations!',\n    text: 'Your message was successfully send and will back to you soon',\n    icon: 'success',\n    timer: 2000,\n    timerProgressBar: true,\n    showConfirmButton: false\n  });\n}; // Form initial state\n\n\nvar INITIAL_STATE = {\n  name: \"\",\n  email: \"\",\n  number: \"\",\n  subject: \"\",\n  text: \"\"\n};\n\nvar ContactForm = function ContactForm() {\n  var _useState = useState(INITIAL_STATE),\n      contact = _useState[0],\n      setContact = _useState[1];\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.errors;\n\n  var handleChange = function handleChange(e) {\n    var _e$target = e.target,\n        name = _e$target.name,\n        value = _e$target.value;\n    setContact(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, name, value));\n    });\n    console.log(contact);\n  };\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var url, name, email, number, subject, text, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              url = \"\".concat(baseUrl, \"/api/contact\");\n              name = contact.name, email = contact.email, number = contact.number, subject = contact.subject, text = contact.text;\n              payload = {\n                name: name,\n                email: email,\n                number: number,\n                subject: subject,\n                text: text\n              };\n              _context.next = 6;\n              return axios.post(url, payload);\n\n            case 6:\n              console.log(url);\n              setContact(INITIAL_STATE);\n              alertContent();\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    id: \"contactForm\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col-lg-6 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    className: \"form-control\",\n    placeholder: \"Name\",\n    value: contact.name,\n    onChange: handleChange,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    }\n  }, errors.name && 'Name is required.'))), __jsx(\"div\", {\n    className: \"col-lg-6 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    className: \"form-control\",\n    placeholder: \"Email\",\n    value: contact.email,\n    onChange: handleChange,\n    ref: register({\n      required: true,\n      pattern: /^\\S+@\\S+$/i\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    }\n  }, errors.email && 'Email is required.'))), __jsx(\"div\", {\n    className: \"col-lg-6 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"number\",\n    className: \"form-control\",\n    placeholder: \"Phone\",\n    value: contact.number,\n    onChange: handleChange,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    }\n  }, errors.number && 'Number is required.'))), __jsx(\"div\", {\n    className: \"col-lg-6 col-md-6\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"subject\",\n    className: \"form-control\",\n    placeholder: \"Subject\",\n    value: contact.subject,\n    onChange: handleChange,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    }\n  }, errors.subject && 'Subject is required.'))), __jsx(\"div\", {\n    className: \"col-lg-12 col-md-12\"\n  }, __jsx(\"div\", {\n    className: \"form-group\"\n  }, __jsx(\"textarea\", {\n    name: \"text\",\n    className: \"form-control\",\n    cols: \"30\",\n    rows: \"5\",\n    placeholder: \"Your message\",\n    value: contact.text,\n    onChange: handleChange,\n    ref: register({\n      required: true\n    })\n  }), __jsx(\"div\", {\n    className: \"invalid-feedback\",\n    style: {\n      display: 'block'\n    }\n  }, errors.text && 'Text body is required.'))), __jsx(\"div\", {\n    className: \"col-lg-12 col-md-12\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\"\n  }, \"Send Message\")))));\n};\n\nexport default ContactForm;","map":null,"metadata":{},"sourceType":"module"}